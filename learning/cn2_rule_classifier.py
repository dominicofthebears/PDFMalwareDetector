import re
import numpy as np
import pandas as pd
from Orange.classification import CN2Learner
from Orange.data import Table, Domain
from sklearn.metrics import classification_report, confusion_matrix
from sklearn.preprocessing import OneHotEncoder
from learning.utils import save_results, save_rules

"""
    Because of the way cn2 algorithm and this implementation in particular works, it is useless to select
    the best learner by applying k-fold cross validation, because we still would have to train the learner
    on the entire dataset, deleting all the rules previously producted, and we cannot save in any way
    the best classifier, since it has no "fit" method to learn on the overall dataset.
"""

def build_model(dataframe, test):
    targets = dataframe["Class"].apply(
        lambda x: 0 if x == "Benign" else 1)  # numerical dataframe requires numerical class for cn2 classifier
    test_targets = test["Class"].apply(lambda x: 0 if x == "Benign" else 1)
    test = test.drop("Class", axis=1)
    dataframe = dataframe.drop("Class", axis=1)

    encoder = OneHotEncoder(handle_unknown="ignore")
    encoder.fit(dataframe)
    dataframe = encoder.transform(dataframe)
    test = encoder.transform(test)
    cols = encoder.get_feature_names_out()
    istances_domain = Domain.from_numpy(dataframe, Y=targets.to_numpy())
    cn2_learner = CN2Learner()
    cn2_classifier = cn2_learner(Table.from_numpy(domain=istances_domain, X=dataframe, Y=targets))
    pred = cn2_classifier.predict((test.toarray()))
    pred2 = np.zeros(len(pred))
    for i in range(0, len(pred)):
        pred2[i] = list(pred[i]).index(pred[i].max())

    cr = classification_report(test_targets, pred2, output_dict=True, zero_division=0)
    cr["Benign"] = cr.pop("0")
    cr["Malicious"] = cr.pop("1")
    conf_matrix = confusion_matrix(test_targets, pred2)
    save_results(clf_name="CN2_learner", conf_matrix=conf_matrix, cr=cr, test_val="test")

    rule_list = []
    for rule in cn2_classifier.rule_list:
        for k in range(0, len(cols)):
            if k < 9:
                pattern = "Feature 0" + str(k+1)
            else:
                pattern = "Feature " + str(k+1)
            rule = re.sub(pattern, str(cols[k]), str(rule))
        str_rule = str(rule)
        str_rule = re.sub("v1", "Benign", str_rule)
        str_rule = re.sub("v2", "Malicious", str_rule)
        str_rule = re.sub(">=", " = ", str_rule)
        str_rule = re.sub("_", " in range ", str_rule)
        rule_list.append(str_rule)
    save_rules(rules=rule_list, clf="CN2_learner")


