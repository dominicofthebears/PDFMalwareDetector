import pickle
import re
import pandas as pd
from Orange.classification import CN2Learner
from Orange.data import Domain, Table
from sklearn.preprocessing import OneHotEncoder


def build_reducted_model(dataframe):
    targets = dataframe["Class"].apply(
        lambda x: 0 if x == "Benign" else 1)  # numerical dataframe requires numerical class for cn2 classifier
    dataframe = dataframe.drop("Class", axis=1)

    encoder = OneHotEncoder(handle_unknown="ignore")
    encoder.fit(dataframe)
    dataframe = encoder.transform(dataframe)
    cols = encoder.get_feature_names_out()
    istances_domain = Domain.from_numpy(dataframe, Y=targets.to_numpy())
    cn2_learner = CN2Learner()
    cn2_classifier = cn2_learner(Table.from_numpy(domain=istances_domain, X=dataframe, Y=targets))
    rule_list = []
    for rule in cn2_classifier.rule_list:
        for k in range(0, len(cols)):
            if k < 9:
                pattern = "Feature 0" + str(k + 1)
            else:
                pattern = "Feature " + str(k + 1)
            rule = re.sub(pattern, str(cols[k]), str(rule))
        str_rule = str(rule)
        str_rule = re.sub("v1", "Benign", str_rule)
        str_rule = re.sub("v2", "Malicious", str_rule)
        str_rule = re.sub(">=", " = ", str_rule)
        str_rule = re.sub("_", " in range ", str_rule)
        rule_list.append(str_rule)

    filename = "../models/surrogated_models/CN2_learner_reduced_model.pkl"
    pickle.dump(cn2_classifier, open(filename, 'wb'))

    f = open("../models/surrogated_models/reduced_rules/CN2_learner_reduced_rules.txt", "w")
    for rule in rule_list:
        f.write(rule + "\n")
    f.close()


def CN2_classify(dataframe, test):
    encoder = OneHotEncoder(handle_unknown="ignore")
    encoder.fit(dataframe.iloc[:, :-1])
    test = encoder.transform(test)

    model = pickle.load(open("../models/surrogated_models/CN2_learner_reduced_model.pkl", 'rb'))
    pred = model.predict(test.toarray())
    pred = pred.max()
    result = "Predicted class for the selected pdf: "
    result += "Benign" if pred == 0.0 else "Malicious"
    return result


def main():
    dataframe = pd.read_csv("../datasets/ClassificationTrainingSet.csv")
    test = pd.read_csv("../datasets/ClassificationTestSet.csv")
    CN2_classify(dataframe, test)


if __name__ == '__main__':
    main()
