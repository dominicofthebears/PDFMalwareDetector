import os
import sys

import pandas as pd
from PyPDF2 import PdfReader
import aspose.words as aw
from bs4 import BeautifulSoup




def feature_extractor():
    dframe = pd.DataFrame(columns=["pdfsize", "metadata size", "pages", "title characters", "isEncrypted",
                                   "images", "text", "Javascript"])
    to_classify = []
    reader = PdfReader("./pdf/sample.pdf")

    #pdfsize
    to_classify.append(int(os.path.getsize("./pdf/sample.pdf")/1024))

    #metadata size
    metadata_size = sys.getsizeof(reader.metadata.author)
    metadata_size += sys.getsizeof(reader.metadata.creator)
    metadata_size += sys.getsizeof(reader.metadata.producer)
    metadata_size += sys.getsizeof(reader.metadata.subject)
    metadata_size += sys.getsizeof(reader.metadata.title)
    to_classify.append(metadata_size)

    #num_pages
    to_classify.append(len(reader.pages))

    #title characters
    to_classify.append(len(reader.metadata.title))

    #encrypted
    to_classify.append(1 if reader.is_encrypted == True else 0)

    #images and text
    to_classify.append(0)
    to_classify.append("No")
    for page in reader.pages:
        to_classify[-2] += len(page.images)
        if len(page.extractText()) > 0 and to_classify[-1] == "No":
            to_classify.pop()
            to_classify.append("Yes")


    #javascript
    doc = aw.Document("./pdf/sample.pdf")
    doc = doc.to_string(aw.SaveFormat.HTML)
    parsed_html = BeautifulSoup(doc, "html.parser")
    to_classify.append(len(parsed_html.find_all(name="<script>")))
    dframe.loc[0] = to_classify


    dframe.to_csv("./datasets/ToClassify.csv", index=False)

